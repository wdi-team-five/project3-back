var http = require('http');
var app = require('../app.js');
var debug = require('debug')('project3-back:server');
var async = require('async');

var models = require('../models');
var closeMongoose = require('../lib/mongooseConnection.js');

var server = http.createServer(app);
var port = 8000;

models.sequelize.sync(
  // { force: true }
).then(function(){
  server.listen(port, function(){
    console.log("Server is running on a port called", port);
  });
});

server.on('error', onError);
server.on('listening', onListening);

process.on('SIGTERM', onTerminate);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onTerminate() {
  async.parallel([
    function(cb) {
      closeMongoose(cb);
    },
    function(cb) {
      models.sequelize.close(cb);
    }
  ], function(err, result) {
    if(err) {
      process.exit(1);
    }
    process.exit(0);
  });
}
